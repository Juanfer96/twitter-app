{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/footer/footer.component.ts","webpack:///src/app/components/footer/footer.component.html","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/components/home-page/home-page.component.ts","webpack:///src/app/components/home-page/home-page.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/search-page/search-page.component.ts","webpack:///src/app/components/search-page/search-page.component.html","webpack:///src/app/components/settings-page/settings-page.component.ts","webpack:///src/app/components/settings-page/settings-page.component.html","webpack:///src/app/components/trend/trend.component.ts","webpack:///src/app/components/trend/trend.component.html","webpack:///src/app/components/tweet-detail/tweet-detail.component.ts","webpack:///src/app/components/tweet-detail/tweet-detail.component.html","webpack:///src/app/components/tweet/tweet.component.ts","webpack:///src/app/components/tweet/tweet.component.html","webpack:///src/app/pipes/date-ago.pipe.ts","webpack:///src/app/services/trend-service.service.ts","webpack:///src/app/services/tweet-service.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","FooterComponent","HeaderComponent","HomePageComponent","ts","spinner","notscrolly","allTweetsLoaded","initialTimeLineTweets","index","getTweets","subscribe","Tweets","show","cont","addNewTeetsTimeLine","count","hide","getTweetsTimeLine","onScroll","NavbarComponent","faSearch","faHome","faCog","SearchPageComponent","searching","searchText","length","getSearchTweets","data","tweets","statuses","setTimeout","trendName","slice","showSearchResults","search","setQuicklySearch","setSelectedTrend","SettingsPageComponent","timeLineSetting","getRealTimeConfiguration","TrendComponent","trendService","selectedTrend","getTrends","trends","generateId","i","forEach","item","trend","emit","name","TweetDetailComponent","route","location","faArrowLeft","faHeart","faRetweet","faComment","faCircle","faCheck","fasHeart","snapshot","paramMap","get","tweetId","getId","getIdTweet","tweet","back","retweeted","retweet_count","favorited","favorite_count","goBack","clickfav","$event","stopPropagation","clickReTweet","TweetComponent","DateAgoPipe","value","args","seconds","Math","floor","Date","intervals","yr","month","wk","d","h","m","s","counter","pure","TrendServiceService","http","trendsUrl","pipe","handleError","operation","result","error","console","providedIn","TweetServiceService","timeLineUrl","searchURL","idURL","userConfiguration","hideAccountsNotVerified","hidePeopleWhoDontfollow","hideDefaultProfile","hideTweetsWhitLinks","hideTweetsTruncated","tweetsToDisplay","finalFilter","err","user","verified","following","default_profile","entities","urls","truncated","tweetFiltered","filter","element","filterTweetsByConfiguration","searchId","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { HomePageComponent } from \"./components/home-page/home-page.component\";\r\nimport { SearchPageComponent } from \"./components/search-page/search-page.component\";\r\nimport { SettingsPageComponent } from \"./components/settings-page/settings-page.component\";\r\nimport { TweetDetailComponent } from \"./components/tweet-detail/tweet-detail.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: \"\", redirectTo: \"home\", pathMatch: \"full\" },\r\n  { path: \"home\", component: HomePageComponent },\r\n  { path: \"search\", component: SearchPageComponent },\r\n  { path: \"settings\", component: SettingsPageComponent },\r\n  { path: \"TweetDetail/:id_str\", component: TweetDetailComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'twitter-app';\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { AppComponent } from \"./app.component\";\r\nimport { TweetComponent } from \"./components/tweet/tweet.component\";\r\nimport { HeaderComponent } from \"./components/header/header.component\";\r\nimport { FooterComponent } from \"./components/footer/footer.component\";\r\nimport { NavbarComponent } from \"./components/navbar/navbar.component\";\r\nimport { TweetDetailComponent } from \"./components/tweet-detail/tweet-detail.component\";\r\nimport { TrendComponent } from \"./components/trend/trend.component\";\r\nimport { HomePageComponent } from \"./components/home-page/home-page.component\";\r\nimport { SearchPageComponent } from \"./components/search-page/search-page.component\";\r\nimport { SettingsPageComponent } from \"./components/settings-page/settings-page.component\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { DateAgoPipe } from \"./pipes/date-ago.pipe\";\r\nimport { InfiniteScrollModule } from \"ngx-infinite-scroll\";\r\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\r\nimport { NgxSpinnerModule } from \"ngx-spinner\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    TweetComponent,\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    NavbarComponent,\r\n    TweetDetailComponent,\r\n    TrendComponent,\r\n    HomePageComponent,\r\n    SearchPageComponent,\r\n    SettingsPageComponent,\r\n    DateAgoPipe,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    InfiniteScrollModule,\r\n    FontAwesomeModule,\r\n    NgxSpinnerModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<section class=\"footer\">\r\n  <div class=\"footer-item\">\r\n    <h3>Developers</h3>\r\n    <ul class=\"footer-list\">\r\n      <li>\r\n        <span>Mauricio Navarro</span>\r\n      </li>\r\n      <li>\r\n        <span>Marcelo Benjamin Benitez</span>\r\n      </li>\r\n      <li>\r\n        <span>Juan Fernando Pico</span>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n\r\n  <div class=\"footer-item\">\r\n    <h3>\r\n      <a class=\"footer-git\" href=\"https://github.com/Juanfer96/twitter-app\"\r\n        >GitHub</a\r\n      >\r\n    </h3>\r\n  </div>\r\n  <div class=\"footer-end\"><span>Globant UI Bootcamp 2020</span></div>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h1 class=\"title\">Gwitter</h1>\r\n<app-navbar></app-navbar>","import { Component, OnInit } from \"@angular/core\";\r\nimport { TweetServiceService } from \"src/app/services/tweet-service.service\";\r\nimport { ITweet } from \"src/app/interfaces/tweetInterface\";\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\n\r\n@Component({\r\n  selector: \"app-home-page\",\r\n  templateUrl: \"./home-page.component.html\",\r\n  styleUrls: [\"./home-page.component.css\"]\r\n})\r\nexport class HomePageComponent implements OnInit {\r\n  constructor(\r\n    public ts: TweetServiceService,\r\n    private spinner: NgxSpinnerService\r\n  ) {}\r\n  Tweets: ITweet[];\r\n  notscrolly = true;\r\n  allTweetsLoaded = false;\r\n  initialTimeLineTweets = 50; //the initial tweets that are going to we displayed\r\n  index = 1; //the index used to keep displaying tweets in the timeline\r\n  cont: number; //used to count the tweets on the timeline\r\n\r\n  getTweetsTimeLine(): void {\r\n    this.ts.getTweets(this.initialTimeLineTweets).subscribe(Tweets => {\r\n      this.Tweets = Tweets;\r\n    });\r\n  }\r\n\r\n  onScroll() {\r\n    this.spinner.show(); //shows the spinner while the tweets are loading\r\n    if (this.cont >= 200) {\r\n      //when all the maximum number of tweets are loaded,a message is displayed in the html of the component\r\n      this.allTweetsLoaded = true;\r\n    }\r\n\r\n    if (this.notscrolly) {\r\n      this.notscrolly = false;\r\n      this.index++;\r\n      this.cont = this.initialTimeLineTweets * this.index;\r\n      this.addNewTeetsTimeLine(this.cont);\r\n    }\r\n  }\r\n\r\n  addNewTeetsTimeLine(count: number) {\r\n    this.ts.getTweets(count).subscribe(Tweets => {\r\n      this.Tweets = Tweets;\r\n      this.notscrolly = true;\r\n      this.spinner.hide(); //hides the spinner when the time line is loaded\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getTweetsTimeLine();\r\n  }\r\n}\r\n","<app-header></app-header>\r\n<ul>\r\n  <div infiniteScroll [infiniteScrollDistance]=\"2\" (scrolled)=\"onScroll()\">\r\n    <app-tweet [Tweets]=\"Tweets\"></app-tweet>\r\n\r\n    <div *ngIf=\"allTweetsLoaded\">\r\n      <p class=\"allTweetsLoaded\">\r\n        you have already seen all the tweets, upload to see new content\r\n      </p>\r\n    </div>\r\n  </div>\r\n</ul>\r\n\r\n<div class=\"spinnerBottom\">\r\n  <ngx-spinner\r\n    [fullScreen]=\"false\"\r\n    type=\"line-spin-fade\"\r\n    size=\"medium\"\r\n    color=\"grey\"\r\n    bdColor=\"inherit\"\r\n  >\r\n  </ngx-spinner>\r\n</div>\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n  faSearch = faSearch;\r\n  faHome = faHome;\r\n  faCog = faCog;\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<section class=\"navbar\">\r\n  <!-- ICON SIZE 3x -->\r\n  <div class=\"navbar-item size3x\" routerLink=\"/home\">\r\n    <fa-icon [icon]=\"faHome\" size=\"3x\"></fa-icon>\r\n  </div>\r\n  <div class=\"navbar-item size3x\" routerLink=\"/search\">\r\n    <fa-icon [icon]=\"faSearch\" size=\"3x\"></fa-icon>\r\n  </div>\r\n  <div class=\"navbar-item size3x\" routerLink=\"/settings\">\r\n    <fa-icon [icon]=\"faCog\" size=\"3x\"></fa-icon>\r\n  </div>\r\n\r\n  <!-- ICON SIZE 2x -->\r\n\r\n  <div class=\"navbar-item size2x\" routerLink=\"/home\">\r\n    <fa-icon [icon]=\"faHome\" size=\"2x\"></fa-icon>\r\n    <span class=\"navbar-item-text\">Home</span>\r\n  </div>\r\n  <div class=\"navbar-item size2x\" routerLink=\"/search\">\r\n    <fa-icon [icon]=\"faSearch\" size=\"2x\"></fa-icon>\r\n    <span class=\"navbar-item-text\">Search</span>\r\n  </div>\r\n  <div class=\"navbar-item size2x\" routerLink=\"/settings\">\r\n    <fa-icon [icon]=\"faCog\" size=\"2x\"></fa-icon>\r\n    <span class=\"navbar-item-text\">Settings</span>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { TweetServiceService } from \"src/app/services/tweet-service.service\";\r\nimport { ITweet } from \"src/app/interfaces/tweetInterface\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\n\r\n@Component({\r\n  selector: \"app-search-page\",\r\n  templateUrl: \"./search-page.component.html\",\r\n  styleUrls: [\"./search-page.component.css\"]\r\n})\r\nexport class SearchPageComponent implements OnInit {\r\n  searchText: string;\r\n  tweets: ITweet[];\r\n  faSearch = faSearch;\r\n  searching: boolean = false;\r\n\r\n  notscrolly: boolean = true;\r\n  allTweetsLoaded: boolean = false;\r\n  initialTimeLineTweets: number = 10; //the initial tweets that are going to we displayed\r\n  index: number = 10; //the index used to keep displaying tweets in the timeline\r\n  cont: number; //used to count the tweets on the timeline\r\n\r\n  constructor(\r\n    public ts: TweetServiceService,\r\n    private spinner: NgxSpinnerService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  showSearchResults(): void {\r\n    //To not start an empty search with 3 blanks\r\n    if (this.searchText === \"\") {\r\n      this.searchText = \"\";\r\n      this.spinner.hide();\r\n    }\r\n    //Only start searching with 3 characters\r\n    if (this.searchText.length >= 3) {\r\n      this.getTweets(this.initialTimeLineTweets);\r\n      this.searching = true;\r\n      this.spinner.hide();\r\n    } else {\r\n      this.searching = false;\r\n      this.spinner.show();\r\n    }\r\n  }\r\n\r\n  getTweets(count: number): void {\r\n    this.ts.getSearchTweets(this.searchText, count).subscribe(data => {\r\n      this.tweets = data.statuses;\r\n    });\r\n  }\r\n\r\n  onScroll() {\r\n  \r\n    if (this.notscrolly) {\r\n      this.spinner.show(); //shows the spinner while the tweets are loading\r\n      this.notscrolly = false;\r\n      this.cont = this.initialTimeLineTweets + this.index;\r\n      this.index = this.index + 10;\r\n      this.addNewTeetsTimeLine(this.cont);\r\n    }\r\n  }\r\n\r\n  addNewTeetsTimeLine(count: number) {\r\n    this.getTweets(count);\r\n    this.notscrolly = true;\r\n    setTimeout(() => {\r\n      this.spinner.hide();\r\n    }, 2000); //hides the spinner when the time line is loaded, the setTimeout is used because the search was too fast,soo with that we can simulate more search time\r\n  }\r\n\r\n  setSelectedTrend(trendName: string) {\r\n    if (trendName[0] == \"#\") {\r\n      trendName = trendName.slice(1);\r\n    }\r\n    this.searchText = trendName;\r\n    this.showSearchResults();\r\n  }\r\n  setQuicklySearch(search: string) {\r\n    this.searchText = search;\r\n    this.showSearchResults();\r\n  }\r\n}\r\n","<app-header></app-header>\r\n<section class=\"search\">\r\n  <fa-icon [icon]=\"faSearch\" size=\"2x\" class=\"icon\"></fa-icon>\r\n  <input\r\n    class=\"input\"\r\n    type=\"text\"\r\n    [(ngModel)]=\"searchText\"\r\n    (keyup)=\"showSearchResults()\"\r\n    placeholder=\"Search...\"\r\n  />\r\n</section>\r\n\r\n<div class=\"quickly-search\">\r\n  <div class=\"quickly-search-item\" (click)=\"setQuicklySearch('News')\">\r\n    <span>News</span>\r\n  </div>\r\n  <div class=\"quickly-search-item\" (click)=\"setQuicklySearch('Events')\">\r\n    <span>Events</span>\r\n  </div>\r\n</div>\r\n\r\n<ul *ngIf=\"searching\">\r\n  <h3 class=\"subtitle\">\"{{ searchText }}\" search results</h3>\r\n  <div infiniteScroll [infiniteScrollDistance]=\"2\" (scrolled)=\"onScroll()\">\r\n    <app-tweet [Tweets]=\"tweets\"></app-tweet>\r\n  </div>\r\n</ul>\r\n\r\n<div class=\"spinnerBottom\">\r\n  <ngx-spinner\r\n    [fullScreen]=\"false\"\r\n    type=\"line-spin-fade\"\r\n    size=\"medium\"\r\n    color=\"#a1becc\"\r\n    bdColor=\"inherit\"\r\n  ></ngx-spinner>\r\n</div>\r\n\r\n\r\n<app-trend (selectedTrend)=\"setSelectedTrend($event)\"></app-trend>\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ITimeLineaConfiguration } from \"src/app/interfaces/timeLineConfigurationInterface\";\r\nimport { TweetServiceService } from \"src/app/services/tweet-service.service\";\r\n\r\n@Component({\r\n  selector: \"app-settings-page\",\r\n  templateUrl: \"./settings-page.component.html\",\r\n  styleUrls: [\"./settings-page.component.css\"]\r\n})\r\nexport class SettingsPageComponent implements OnInit {\r\n  timeLineSetting: ITimeLineaConfiguration;\r\n\r\n  constructor(public ts: TweetServiceService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.timeLineSetting = this.ts.getRealTimeConfiguration();\r\n  }\r\n}\r\n","<app-header></app-header>\r\n\r\n<header>\r\n  <h1>Silence notifications from. . .</h1>\r\n</header>\r\n\r\n<label class=\"container\">\r\n  <span>People who have not verified the account</span>\r\n  <input\r\n    [(ngModel)]=\"timeLineSetting.hideAccountsNotVerified\"\r\n    type=\"checkbox\"\r\n    checked=\"checked\"\r\n  />\r\n  <span class=\"checkmark\"></span>\r\n</label>\r\n\r\n<label class=\"container\">\r\n  <span>People who do not follow</span>\r\n  <input\r\n    [(ngModel)]=\"timeLineSetting.hidePeopleWhoDontfollow\"\r\n    type=\"checkbox\"\r\n    checked=\"checked\"\r\n  />\r\n</label>\r\n\r\n<label class=\"container\">\r\n  <span>People who have default profile information</span>\r\n  <input\r\n    [(ngModel)]=\"timeLineSetting.hideDefaultProfile\"\r\n    type=\"checkbox\"\r\n    checked=\"checked\"\r\n  />\r\n</label>\r\n\r\n<label class=\"container\">\r\n  <span>Tweets that contains a link</span>\r\n  <input\r\n    [(ngModel)]=\"timeLineSetting.hideTweetsWhitLinks\"\r\n    type=\"checkbox\"\r\n    checked=\"checked\"\r\n  />\r\n</label>\r\n\r\n<label class=\"container\">\r\n  <span>Tweets that has text truncated</span>\r\n  <input\r\n    [(ngModel)]=\"timeLineSetting.hideTweetsTruncated\"\r\n    type=\"checkbox\"\r\n    checked=\"checked\"\r\n  />\r\n</label>\r\n\r\n<app-footer></app-footer>\r\n","import { Component, OnInit, Output, EventEmitter } from \"@angular/core\";\r\nimport { ITrend } from \"../../interfaces/trendInterface\";\r\nimport { TrendServiceService } from \"../../services/trend-service.service\";\r\n\r\n@Component({\r\n  selector: \"app-trend\",\r\n  templateUrl: \"./trend.component.html\",\r\n  styleUrls: [\"./trend.component.css\"]\r\n})\r\nexport class TrendComponent implements OnInit {\r\n  trends: ITrend[];\r\n  cont: number = 0;\r\n  @Output() selectedTrend = new EventEmitter();\r\n\r\n  constructor(private trendService: TrendServiceService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.trendService.getTrends().subscribe(data => {\r\n      this.trends = data[0].trends;\r\n      this.generateId();\r\n    });\r\n  }\r\n\r\n  generateId(): void {\r\n    let i = 1;\r\n    this.trends.forEach(item => {\r\n      item.id = i++;\r\n    });\r\n  }\r\n\r\n  onSelectedTrend(trend) {\r\n    this.selectedTrend.emit(trend.name);\r\n  }\r\n}\r\n","<h3 class=\"subtitle\">Trends for you</h3>\r\n<ol class=\"list\">\r\n  <li\r\n    class=\"list-item\"\r\n    *ngFor=\"let trend of trends\"\r\n    (click)=\"onSelectedTrend(trend)\"\r\n  >\r\n    <div class=\"id-number\">{{ trend.id }}</div>\r\n    <div class=\"trend-wrapper\">\r\n      <div class=\"name\">{{ trend.name }}</div>\r\n      <div\r\n        *ngIf=\"trend.tweet_volume == null; then thenBlock; else elseBlock\"\r\n      ></div>\r\n      <ng-template #thenBlock\r\n        ><div class=\"tweet-volume\">0 Tweets</div></ng-template\r\n      >\r\n      <ng-template #elseBlock\r\n        ><div class=\"tweet-volume\">\r\n          {{ trend.tweet_volume }} Tweets\r\n        </div></ng-template\r\n      >\r\n    </div>\r\n  </li>\r\n</ol>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { ITweet } from \"./../../interfaces/tweetInterface\";\r\nimport { TweetServiceService } from \"src/app/services/tweet-service.service\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Location } from \"@angular/common\";\r\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faRetweet } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faComment } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faHeart as fasHeart } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n@Component({\r\n  selector: \"app-tweet-detail\",\r\n  templateUrl: \"./tweet-detail.component.html\",\r\n  styleUrls: [\"./tweet-detail.component.css\"]\r\n})\r\nexport class TweetDetailComponent implements OnInit {\r\n  tweetId: string;\r\n  tweet: ITweet;\r\n  faArrowLeft = faArrowLeft;\r\n  faHeart = faHeart;\r\n  faRetweet = faRetweet;\r\n  faComment = faComment;\r\n  faCircle = faCircle;\r\n  faCheck = faCheck;\r\n  fasHeart = fasHeart;\r\n\r\n  constructor(\r\n    public ts: TweetServiceService,\r\n    private route: ActivatedRoute,\r\n    private location: Location\r\n  ) {}\r\n\r\n  getId() {\r\n    return this.route.snapshot.paramMap.get(\"id_str\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.tweetId = this.getId();\r\n    this.ts.getIdTweet(this.tweetId).subscribe(data => {\r\n      this.tweet = data;\r\n    });\r\n  }\r\n\r\n  goBack(): void {\r\n    this.location.back();\r\n  }\r\n\r\n  clickReTweet() {\r\n    if (this.tweet.retweeted) {\r\n      this.tweet.retweeted = false;\r\n      this.tweet.retweet_count -= 1;\r\n    } else {\r\n      this.tweet.retweet_count += 1;\r\n      this.tweet.retweeted = true;\r\n    }\r\n  }\r\n\r\n  clickfav() {\r\n    if (this.tweet.favorited) {\r\n      this.tweet.favorited = false;\r\n      this.tweet.favorite_count -= 1;\r\n    } else {\r\n      this.tweet.favorite_count += 1;\r\n      this.tweet.favorited = true;\r\n    }\r\n  }\r\n}\r\n","<section class=\"tweet-detail-wrapper\">\r\n  <div class=\"tweetGoBack\">\r\n    <fa-icon [icon]=\"faArrowLeft\" size=\"2x\" (click)=\"goBack()\"></fa-icon>\r\n    <span>Tweet</span>\r\n  </div>\r\n\r\n  <div class=\"tweetHead\">\r\n    <div class=\"profileImage\">\r\n      <img src=\"{{ tweet?.user.profile_image_url }}\" alt=\"ProfileImage\" />\r\n    </div>\r\n    <div class=\"userName\">\r\n      <span>{{ tweet?.user.name }}</span>\r\n      <span *ngIf=\"tweet?.user.verified\">\r\n        <fa-icon [icon]=\"faCheck\" size=\"xs\" class=\"userVerified\"></fa-icon>\r\n      </span>\r\n    </div>\r\n    <div class=\"screenName\">\r\n      <span> @{{ tweet?.user.screen_name }}</span>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"tweetBody\">\r\n    <span class=\"text\">{{ tweet?.text }}</span>\r\n  </div>\r\n\r\n  <div *ngIf=\"tweet?.entities.media\">\r\n    <img\r\n      src=\"{{ (tweet?.entities.media)[0].media_url }}\"\r\n      alt=\"img not found\"\r\n      class=\"imageContent\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"timeAgoTweet\">\r\n    <span> {{ tweet?.created_at | date: \"h:mm a.-d MMM. yy \" }}</span>\r\n  </div>\r\n\r\n  <div class=\"tweetFooter\">\r\n    <div class=\"retweet\">\r\n      <span> {{ tweet?.retweet_count }} Retweet</span>\r\n    </div>\r\n    <div class=\"favourite\">\r\n      <span> {{ tweet?.favorite_count }} Like</span>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"tweetIcons\">\r\n    <div class=\"icon\">\r\n      <div clas=\"iconZone\" (click)=\"clickfav(); $event.stopPropagation()\">\r\n        <span *ngIf=\"!tweet?.favorited; else favorited\">\r\n          <fa-icon class=\"iconHeart\" [icon]=\"faHeart\" size=\"3x\"> </fa-icon\r\n        ></span>\r\n\r\n        <ng-template #favorited>\r\n          <fa-icon [icon]=\"fasHeart\" size=\"3x\" class=\"favourited\"></fa-icon>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"icon\" (click)=\"clickReTweet(); $event.stopPropagation()\">\r\n      <span *ngIf=\"!tweet?.retweeted; else retweetedDone\">\r\n        <fa-icon class=\"iconRe\" [icon]=\"faRetweet\" size=\"3x\"> </fa-icon>\r\n      </span>\r\n\r\n      <ng-template #retweetedDone>\r\n        <fa-icon class=\"retweeted\" [icon]=\"faRetweet\" size=\"3x\"></fa-icon>\r\n      </ng-template>\r\n    </div>\r\n\r\n    <div class=\"icon\">\r\n      <fa-icon class=\"iconCo\" [icon]=\"faComment\" size=\"3x\"></fa-icon>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<app-footer></app-footer>\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { ITweet } from \"src/app/interfaces/tweetInterface\";\r\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faRetweet } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faHeart as fasHeart } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n@Component({\r\n  selector: \"app-tweet\",\r\n  templateUrl: \"./tweet.component.html\",\r\n  styleUrls: [\"./tweet.component.css\"]\r\n})\r\nexport class TweetComponent implements OnInit {\r\n  @Input() Tweets: ITweet[];\r\n  faHeart = faHeart;\r\n  faRetweet = faRetweet;\r\n  fasHeart = fasHeart;\r\n  faCheck = faCheck;\r\n  tweet: any;\r\n\r\n  clickfav(tweet: { favorited: boolean; favorite_count: number }) {\r\n    if (tweet.favorited) {\r\n      tweet.favorited = false;\r\n      tweet.favorite_count -= 1;\r\n    } else {\r\n      tweet.favorite_count += 1;\r\n      tweet.favorited = true;\r\n    }\r\n  }\r\n\r\n  clickReTweet(tweet: { retweeted: boolean; retweet_count: number }) {\r\n    if (tweet.retweeted) {\r\n      tweet.retweeted = false;\r\n      tweet.retweet_count -= 1;\r\n    } else {\r\n      tweet.retweet_count += 1;\r\n      tweet.retweeted = true;\r\n    }\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}","<li *ngFor=\"let tweet of Tweets\" routerLink=\"/TweetDetail/{{ tweet.id_str }}\">\r\n  <img src=\"{{ tweet.user.profile_image_url }}\" alt=\"\" class=\"profileImage\" />\r\n\r\n  <div class=\"tweetHead\">\r\n    <span class=\"userName\">{{ tweet.user.name }}</span>\r\n    <span *ngIf=\"tweet.user.verified\">\r\n      <fa-icon [icon]=\"faCheck\" size=\"xs\" class=\"userVerified\"></fa-icon>\r\n    </span>\r\n    <span class=\"screenName\"> @{{ tweet.user.screen_name }}</span>\r\n    <span class=\"timeAgoTweet\"> - {{ tweet.created_at | dateAgo }}</span>\r\n  </div>\r\n\r\n  <div class=\"tweetBody\">\r\n    <span class=\"text\">{{ tweet.text }}</span>\r\n  </div>\r\n\r\n  <div *ngIf=\"tweet.entities.media\">\r\n    <img\r\n      src=\"{{ tweet.entities.media[0].media_url }}\"\r\n      width=\"400\"\r\n      height=\"250\"\r\n      alt=\"img not found\"\r\n      class=\"imageContent\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"tweetFooter\">\r\n    <div class=\"favourite\" (click)=\"clickfav(tweet); $event.stopPropagation()\">\r\n      <span *ngIf=\"!tweet.favorited; else favorited\">\r\n        <fa-icon [icon]=\"faHeart\" size=\"2x\"></fa-icon>\r\n      </span>\r\n\r\n      <ng-template #favorited>\r\n        <fa-icon [icon]=\"fasHeart\" size=\"2x\" class=\"favourited\"></fa-icon>\r\n      </ng-template>\r\n    </div>\r\n    <span> {{ tweet.favorite_count }} </span>\r\n\r\n    <div\r\n      class=\"retweet\"\r\n      (click)=\"clickReTweet(tweet); $event.stopPropagation()\"\r\n    >\r\n      <span *ngIf=\"!tweet.retweeted; else retweetedDone\">\r\n        <fa-icon [icon]=\"faRetweet\" size=\"2x\"></fa-icon>\r\n      </span>\r\n\r\n      <ng-template #retweetedDone>\r\n        <fa-icon class=\"retweeted\" [icon]=\"faRetweet\" size=\"2x\"></fa-icon>\r\n      </ng-template>\r\n    </div>\r\n    <span> {{ tweet.retweet_count }} </span>\r\n  </div>\r\n</li>\r\n","import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({\r\n  name: \"dateAgo\",\r\n  pure: true\r\n})\r\nexport class DateAgoPipe implements PipeTransform {\r\n  transform(value: any, args?: any): any {\r\n    if (value) {\r\n      const seconds = Math.floor((+new Date() - +new Date(value)) / 1000);\r\n      if (seconds < 29)\r\n        // less than 30 seconds ago will show as 'Just now'\r\n        return \"Just now\";\r\n      const intervals = {\r\n        yr: 31536000, //years\r\n        month: 2592000,\r\n        wk: 604800, //weeks\r\n        d: 86400, //day\r\n        h: 3600, //hours\r\n        m: 60, //minutes\r\n        s: 1 //secondss\r\n      };\r\n      let counter;\r\n      for (const i in intervals) {\r\n        counter = Math.floor(seconds / intervals[i]);\r\n        if (counter > 0) {\r\n          return counter + \" \" + i;\r\n        }\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { ITrend } from \"../interfaces/trendInterface\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class TrendServiceService {\r\n  private trendsUrl = \"http://localhost:8080/trends?id=23424747\";\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getTrends(): Observable<any> {\r\n    return this.http\r\n      .get<any>(this.trendsUrl)\r\n      .pipe(catchError(this.handleError<ITrend[]>(\"getMovies\", [])));\r\n  }\r\n\r\n  private handleError<T>(operation = \"operation\", result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { map, catchError } from \"rxjs/operators\";\r\nimport { ITimeLineaConfiguration } from \"../interfaces/timeLineConfigurationInterface\";\r\nimport { ITweet } from \"../interfaces/tweetInterface\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class TweetServiceService {\r\n  private timeLineUrl = \"http://localhost:8080/timeline?count=\";\r\n  private searchURL = \"http://localhost:8080/search?q=\";\r\n  private idURL = \"http://localhost:8080/show?id=\";\r\n\r\n  userConfiguration: ITimeLineaConfiguration;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.userConfiguration = {\r\n      hideAccountsNotVerified: false,\r\n      hidePeopleWhoDontfollow: false,\r\n      hideDefaultProfile: false,\r\n      hideTweetsWhitLinks: false,\r\n      hideTweetsTruncated: false\r\n    };\r\n  }\r\n\r\n  getTweets(tweetsToDisplay: number): Observable<any> {\r\n    return this.http.get<any>(`${this.timeLineUrl}${tweetsToDisplay}`).pipe(\r\n      map(data => (data = this.finalFilter(data))),\r\n\r\n      catchError(err => {\r\n        return err;\r\n      })\r\n    );\r\n  }\r\n\r\n  filterTweetsByConfiguration(tweet: any) {\r\n    if (\r\n      this.userConfiguration.hideAccountsNotVerified &&\r\n      !tweet.user.verified\r\n    ) {\r\n      return false;\r\n    }\r\n    if (\r\n      this.userConfiguration.hidePeopleWhoDontfollow &&\r\n      !tweet.user.following\r\n    ) {\r\n      return false;\r\n    }\r\n    if (\r\n      this.userConfiguration.hideDefaultProfile &&\r\n      tweet.user.default_profile\r\n    ) {\r\n      return false;\r\n    }\r\n    if (\r\n      this.userConfiguration.hideTweetsWhitLinks &&\r\n      tweet.entities.urls != 0\r\n    ) {\r\n      return false;\r\n    }\r\n    if (this.userConfiguration.hideTweetsTruncated && tweet.truncated) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  finalFilter(tweet: any) {\r\n    const tweetFiltered = tweet.filter(element =>\r\n      this.filterTweetsByConfiguration(element)\r\n    );\r\n    return tweetFiltered;\r\n  }\r\n\r\n  getRealTimeConfiguration(): ITimeLineaConfiguration {\r\n    return this.userConfiguration;\r\n  }\r\n\r\n  getSearchTweets(searchText: string, count: number): Observable<any> {\r\n    return this.http\r\n      .get<any>(this.searchURL + searchText + \"&count=\" + count)\r\n      .pipe(catchError(this.handleError<ITweet[]>(\"getSearchTweets\", [])));\r\n  }\r\n\r\n  getIdTweet(searchId: string): Observable<any> {\r\n    return this.http\r\n      .get<any>(this.idURL + searchId)\r\n      .pipe(catchError(this.handleError<ITweet[]>(\"getIdTweet\", [])));\r\n  }\r\n\r\n  private handleError<T>(operation = \"operation\", result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}